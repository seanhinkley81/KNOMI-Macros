### Custom M600 FOR KNOMI ####
#
# SAVES STATE Including Hotend TEMP
# NOTE my X Y are configured for Mercury.ONE  please adjust for your bed size 
# Sets Hotend TEMp to 50c for standby
# Pause Set Timeout to 12 Hours
# Resume Restores State and resets timeout


[gcode_macro M600]
description: Filament Change. This macro will pause the printer, move the tool to the change position, and retract the filament 130mm
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
       SAVE_GCODE_STATE NAME=M600_state
       PAUSE
       G91
       G1 E-.8 F2700
       G1 Z{Z}
       G1 X109 Y350 F3000
       G91
       G1 E-25 F1500
       M109 S50

[gcode_macro SWAP_RESUME] 
description: M600 Resume Use this command resume during a mid print filament swap
gcode:
    M109 S{hotendtemp}
    RESTORE_GCODE_STATE NAME=M600_state 
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
    RESUME

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_filament_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                   ; disable filament monitor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+25} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                        ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        led_printing
    {% endif %}
